<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Node on MLOG</title><link>https://qfsyso.github.io/tags/node/</link><description>Recent content in Node on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Mon, 09 Dec 2024 23:18:09 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/node/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC</title><link>https://qfsyso.github.io/posts/grpc/</link><pubDate>Mon, 09 Dec 2024 23:18:09 +0000</pubDate><guid>https://qfsyso.github.io/posts/grpc/</guid><description>gRPC（Google Remote Procedure Call） 是一个高性能、开源和通用的RPC框架，最初由Google开发。它使用HTTP/2作为传输协议，并默认采用Protocol Buffers作为接口定义语言（IDL）和消息格式。gRPC支持多种编程语言，包括但不限于C++、Java、Python、Go、Ruby、C#、Node.js、PHP等。
gRPC 特点： 高效的数据交换：通过使用Protocol Buffers（Protobuf），gRPC能够以二进制形式序列化和反序列化数据，这比JSON或XML等文本格式更紧凑、更快。 双向流式通信：gRPC支持四种不同的调用类型：简单RPC、服务器端流式RPC、客户端流式RPC以及双向流式RPC。这使得开发者可以灵活选择最适合其应用场景的通信模式。 HTTP/2：gRPC基于HTTP/2构建，这意味着它可以利用HTTP/2提供的特性，如多路复用、头部压缩、流量控制等，来提高性能和可靠性。 跨平台支持：gRPC可以在多种环境中运行，包括云服务、本地部署、移动端等，并且对各种编程语言都有良好的支持，便于构建跨平台的应用程序。 插件系统：gRPC提供了一个插件系统，允许用户自定义代码生成逻辑，或者添加额外的功能，如认证、日志记录、监控等。 强大的社区和生态系统：由于它是Google的产品并且被广泛采用，因此拥有一个活跃的社区和丰富的第三方库与工具生态系统。
gRPC 场景： gRPC的使用场景非常广泛，尤其适用于需要高效、可靠和高性能通信的应用程序。以下是gRPC的一些典型使用场景：
1. 微服务架构 服务间通信：在微服务架构中，不同的服务可能使用不同的编程语言实现，并且需要高效地相互交流。gRPC以其跨语言支持和高效的二进制协议（Protocol Buffers），成为构建微服务之间通信层的理想选择。 负载均衡：gRPC原生支持客户端负载均衡，可以帮助分散请求到多个服务实例上，提高系统的可用性和性能。
2. 实时应用程序 双向流式通信：gRPC的双向流特性非常适合用于实时应用程序，如聊天应用、在线游戏、视频会议等，其中客户端和服务端需要持续地交换数据。 实时数据推送：对于需要从服务器向客户端推送实时更新的应用，例如股票行情、社交媒体通知、物联网设备状态更新等，gRPC的服务端流式RPC可以有效地实现这一需求。
3. 移动应用与后端通信 轻量级性能：由于其高效的序列化机制和较低的网络开销，gRPC特别适合移动应用与后端服务器之间的通信，特别是在网络条件不佳的情况下，能够减少电量消耗并提高响应速度。 快速开发：gRPC自动生成客户端和服务端代码的能力，大大简化了开发流程，尤其是在多平台开发环境中，减少了重复劳动。
4. 跨语言通信 多语言环境：gRPC支持多种编程语言，使得它非常适合用于跨语言通信的场景。不同团队或项目可以使用各自熟悉的技术栈，同时通过gRPC进行无缝集成。 异构系统集成：当需要将遗留系统与现代应用集成时，gRPC的跨语言能力可以帮助桥接这些系统，促进信息的流动和交互。
5. 分布式系统 节点间通信：在分布式系统中，各节点之间的通信是至关重要的。gRPC提供的高效率和可靠性使其成为分布式计算、任务分发、集群管理等场景下的首选通信框架。 数据同步：gRPC可以用来实现实时的数据同步，确保分布式系统中的所有节点都拥有最新的数据副本。
6. 容器化环境 服务发现：在Kubernetes等容器编排平台上，gRPC可以通过服务发现机制自动找到其他服务，简化了容器间的通信配置。 轻量级部署：gRPC的轻量级特性和对多语言的支持，使其非常适合容器化部署，有助于提升资源利用率和服务扩展性。
7. API后端服务 高性能API：许多大型互联网公司使用gRPC来构建其API后端服务，因为它提供了高性能、可扩展性和易于维护的方式来处理客户端请求。 类型安全：gRPC的IDL（接口定义语言）定义了严格的服务契约，保证了服务端和客户端之间的调用是类型安全的，减少了运行时错误的发生。
8. 物联网（IoT） 低资源消耗：gRPC的高效性能和紧凑的消息格式，使得它成为连接IoT设备和传感器的理想通信协议，能够在有限的计算和网络资源下提供可靠的通信。 实时监控与控制：gRPC的流式API非常适合用于实时监控和控制IoT设备，如智能家居系统、工业自动化等场景。
9. 大数据和机器学习 数据传输：在大数据处理和机器学习训练过程中，gRPC可以用来高效地传输大量数据，特别是当数据需要在不同的计算节点之间传递时。 模型服务：gRPC常被用于构建机器学习模型的服务化接口，允许客户端以高效的方式查询模型预测结果。 综上所述，gRPC是一个灵活且强大的通信框架，适用于各种需要高效、可靠通信的场景。无论是构建复杂的微服务架构，还是简单的客户端-服务器应用，gRPC都能提供显著的优势。
Node.js gRPC 创建和调用 gRPC 服务。包括服务器和客户端实现。
1. 安装必要的包 在项目目录下执行以下命令安装 gRPC 相关依赖：
npm install @grpc/grpc-js @grpc/proto-loader 2.</description></item><item><title> Node Swagger</title><link>https://qfsyso.github.io/posts/node-swagger/</link><pubDate>Thu, 07 Nov 2024 00:37:19 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-swagger/</guid><description>Node.js 和 Swagger 创建简单增删改查 (CRUD) API ， 使用 Express 作为 Web 框架，并集成 Swagger UI 来自动生成 API 文档。
mkdir node-swagger-crud cd node-swagger-crud npm init -y npm install express swagger-jsdoc swagger-ui-express 2: 设置 Express 应用 创建一个文件 app.js，用于定义 Express 应用及基本路由。
// app.js const express = require(&amp;#34;express&amp;#34;); const app = express(); app.use(express.json()); // 解析 JSON 请求 const swaggerJsDoc = require(&amp;#34;swagger-jsdoc&amp;#34;); const swaggerUi = require(&amp;#34;swagger-ui-express&amp;#34;); // Swagger 配置 const swaggerOptions = { swaggerDefinition: { openapi: &amp;#34;3.</description></item><item><title> nginx domain 4 nodeserver</title><link>https://qfsyso.github.io/posts/nginx-domain-4-nodeserver/</link><pubDate>Wed, 09 Oct 2024 20:36:34 +0000</pubDate><guid>https://qfsyso.github.io/posts/nginx-domain-4-nodeserver/</guid><description>安装了 Nginx sudo apt update sudo apt install nginx node curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - sudo apt-get install -y nodejs node -v npm -v //testwebside const http = require(&amp;#39;http&amp;#39;); const hostname = &amp;#39;0.0.0.0&amp;#39;; //127001 const port = 8080; const server = http.createServer((req, res) =&amp;gt; { res.statusCode = 200; res.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;text/plain&amp;#39;); res.end(&amp;#39;Hello World 8080 \n&amp;#39;); }); server.listen(port, hostname, () =&amp;gt; { console.log(`Server running at http://${hostname}:${port}/`); }); 9090 const port = 9090;</description></item><item><title>Err idealTree:npm: sill idealTree</title><link>https://qfsyso.github.io/posts/err-idealtreenpm-sill-idealtree/</link><pubDate>Sun, 22 Sep 2024 01:18:16 +0000</pubDate><guid>https://qfsyso.github.io/posts/err-idealtreenpm-sill-idealtree/</guid><description>idealTree:npm: sill idealTree buildDeps Err
#清除缓存
npm cache clean --force 出现npm WARN using &amp;ndash;force I sure hope you know what you are doing.用：
npm cache verify 设置镜像源： npm config set registry https://registry.npmmirror.com 查看下是否设置成功： npm config get registry https://registry.npmmirror.com
npm install</description></item><item><title>node ase encrypt</title><link>https://qfsyso.github.io/posts/node-ase-encrypt/</link><pubDate>Sat, 21 Sep 2024 01:25:07 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-ase-encrypt/</guid><description>// 加密方法 public static string Encrypt(string plainText, string key) { using (Aes aesAlg = Aes.Create()) { aesAlg.Key = Encoding.UTF8.GetBytes(key); aesAlg.IV = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6];// new byte[16]; // 初始化向量 (IV) 可以设为全零，也可以使用随机值 ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV); using (MemoryStream msEncrypt = new MemoryStream()) { using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) using (StreamWriter swEncrypt = new StreamWriter(csEncrypt)) { swEncrypt.</description></item><item><title> node keep backend</title><link>https://qfsyso.github.io/posts/node-keep-backend/</link><pubDate>Sat, 31 Aug 2024 01:52:41 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-keep-backend/</guid><description>在 Debian 系统上运行 Node.js 应用程序并使其保持常驻运行有几种方法
方法一：使用 systemd 服务 可以创建一个 .service 文件来定义 Node.js 应用程序作为系统服务。 my-node-app
sudo nano /etc/systemd/system/my-node-app.service 编辑服务文件： 在文件中添加以下内容 ：
[Unit] Description=My Node.js Application After=network.target [Service] User=your-username WorkingDirectory=/path/to/your/app ExecStart=/usr/bin/node /path/to/your/app/index.js Restart=always Environment=NODE_ENV=production [Install] WantedBy=multi-user.target 启动并启用服务：
sudo systemctl start my-node-app sudo systemctl enable my-node-app 检查服务状态：
sudo systemctl status my-node-app 方法二：使用 nohup 和 &amp;amp; 如果不想使用 systemd，可以使用 nohup 命令来保持应用程序在后台运行。
启动应用程序：
sudo nohup node /root/nodexxx/app.js &amp;gt; outputapp3.log 2&amp;gt;&amp;amp;1 &amp;amp; 这会启动 Node.js 应用程序，并将输出和错误重定向到 app.log 文件中。</description></item><item><title>node koa</title><link>https://qfsyso.github.io/posts/node-koa/</link><pubDate>Mon, 19 Aug 2024 23:57:00 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-koa/</guid><description>koa Koa 是一个由 Express 原班人马打造的新的 Web 框架，旨在提供更小、更富表现力、更健壮的服务器处理逻辑。它使用 ES6 的新特性，如 Promises 和 generators，来简化异步流程控制。以下是一些关于 Koa 的关键点：
特点 轻量级：Koa 的核心代码非常精简，没有捆绑很多中间件，这使得它的启动速度快、体积小。
简洁的中间件系统：Koa 使用基于 Promise 的中间件模型，这个模型允许你通过 async/await 来编写异步代码，并且可以方便地在中间件之间共享逻辑。
强大的上下文对象 (Context)：每个请求都有一个 context 对象，它包含了 request 和 response 的所有信息，简化了处理 HTTP 消息的流程。
**错误处理：**Koa 通过统一的错误处理机制来简化错误处理过程，你可以在任何地方抛出错误，并在应用的顶层捕获它们。
**内置支持 async/await：**由于 Koa 基于 ES6 的新特性，所有的处理函数默认都是异步的，你可以使用 async/await 来编写更简洁和直观的代码。
nvm install 7 npm i koa node my-koa-app.js const Koa = require(&amp;#39;koa&amp;#39;); const app = new Koa(); // logger app.use(async (ctx, next) =&amp;gt; { await next(); // 调用下一个中间件 const rt = ctx.</description></item><item><title>Node socket.io</title><link>https://qfsyso.github.io/posts/node-socket.io/</link><pubDate>Sun, 26 May 2024 23:01:07 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-socket.io/</guid><description>server
npm install express npm install socket.io const express = require(&amp;#39;express&amp;#39;); const http = require(&amp;#39;http&amp;#39;); const socketIO = require(&amp;#39;socket.io&amp;#39;); const app = express(); const server = http.createServer(app); const io = socketIO(server); io.on(&amp;#39;connection&amp;#39;, (socket) =&amp;gt; { console.log(&amp;#39;User connected&amp;#39;); socket.on(&amp;#39;chat message&amp;#39;, (msg) =&amp;gt; { console.log(&amp;#39;message: &amp;#39; + msg); io.emit(&amp;#39;chat message&amp;#39;, msg); // to all }); socket.on(&amp;#39;disconnect&amp;#39;, () =&amp;gt; { console.log(&amp;#39;User disconnected&amp;#39;); }); }); server.listen(24525, () =&amp;gt; { console.log(&amp;#39;Node Server is running on port 24525&amp;#39;); }); docker dockerfile</description></item><item><title>Nodejs Study</title><link>https://qfsyso.github.io/posts/nodejs-study/</link><pubDate>Fri, 17 May 2024 21:00:03 +0000</pubDate><guid>https://qfsyso.github.io/posts/nodejs-study/</guid><description>📘 util util const util = require(&amp;#39;util&amp;#39;); util.isArray([]) util.isRegExp(/some regexp/) util.isDate(new Date()) // true util.isDate(Date()) // false (without &amp;#39;new&amp;#39; returns a String) os var os = require(&amp;#34;os&amp;#34;); // CPU 的字节序 console.log(&amp;#39;endianness : &amp;#39; + os.endianness()); // 操作系统名 console.log(&amp;#39;type : &amp;#39; + os.type()); // 操作系统名 console.log(&amp;#39;platform : &amp;#39; + os.platform()); // 系统内存总量 console.log(&amp;#39;total memory : &amp;#39; + os.totalmem() + &amp;#34; bytes.&amp;#34;); // 操作系统空闲内存量 console.log(&amp;#39;free memory : &amp;#39; + os.freemem() + &amp;#34; bytes.</description></item><item><title>Nodejs base</title><link>https://qfsyso.github.io/posts/nodejs-base/</link><pubDate>Fri, 17 May 2024 19:00:03 +0000</pubDate><guid>https://qfsyso.github.io/posts/nodejs-base/</guid><description>简单的说 Node.js 就是运行在服务端的 JavaScript。
Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。
Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。
🛠Node.js安装 Node.js安装在上一篇文章Debian Node.js HEXO 有讲到
截至目前最新的版本是20.12.2
#查看版本 node -v v20.12.2
win下可以在官网下载安装 https://nodejs.org/en/download
debian nodejs node 14版本
$ apt-get update $ curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - #如果提示sudo 命令没有找到，一定要下载，执行apt-get install sudo -y 即可，然后再执行上述命令
$ apt-get install nodejs -y $ node --version //验证 当然如果需要安装node20版本，只需将上述命令替换为：
$ curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - 💬helloworld hi.</description></item><item><title>Debian Nodejs HEXO</title><link>https://qfsyso.github.io/posts/debian-nodejs-hexo/</link><pubDate>Fri, 03 May 2024 17:02:53 +0000</pubDate><guid>https://qfsyso.github.io/posts/debian-nodejs-hexo/</guid><description>Debian Nodejs HEXO
安装Node.js环境 sudo apt update debian安装最新node v20.12.0 在Debian系统上安装特定版本的Node.js（例如v20.12.0），你可以使用NodeSource二进制分发。以下是安装v20.12.0的步骤：
首先，打开终端。
使用curl下载NodeSource的安装脚本：
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - 安装Node.js：
sudo apt-get install -y nodejs 验证Node.js是否安装成功：
node --version 如果你想要确保安装了特定的v20.12.0版本，可以在安装完Node.js后运行以下命令来验证版本：
node -v 如果显示的版本号是v20.12.0，则表示已经成功安装了该版本。
安装HEXO 使用npm包管理器，直接安装hexo
npm install hexo -g hexo init blog cd blog npm install hexo server hexo 修改端口号 _config.yml # 或者使用 vim _config.yml
Docs: https://hexo.io/docs/server.html server: port: 12311 # 修改这里为你想要的端口号 compress: true header: true hexo s</description></item></channel></rss>