<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Electron on MLOG</title><link>https://qfsyso.github.io/tags/electron/</link><description>Recent content in Electron on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Thu, 19 Sep 2024 23:29:51 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/electron/index.xml" rel="self" type="application/rss+xml"/><item><title>electron uniapp mp3</title><link>https://qfsyso.github.io/posts/electron-uniapp-mp3/</link><pubDate>Thu, 19 Sep 2024 23:29:51 +0000</pubDate><guid>https://qfsyso.github.io/posts/electron-uniapp-mp3/</guid><description>前言 音乐APP版权/广告问题，让听歌体验很差，所以自己整个简单的播放器~
Uniapp MP3 1. 创建项目 在 HBuilderX 中，新建一个 UniApp 项目，项目结构如下：
- pages/ - index/ - index.vue - static/ - manifest.json - pages.json 2. 页面设计和逻辑 index.vue 文件 在 pages/index/index.vue 文件中实现播放器的界面和逻辑：
&amp;lt;template&amp;gt; &amp;lt;view class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;text class=&amp;#34;title&amp;#34;&amp;gt;UniApp 音乐播放器&amp;lt;/text&amp;gt; &amp;lt;view class=&amp;#34;controls&amp;#34;&amp;gt; &amp;lt;button @click=&amp;#34;prevTrack&amp;#34;&amp;gt;上一首&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;playPause&amp;#34;&amp;gt;{{ isPlaying ? &amp;#39;暂停&amp;#39; : &amp;#39;播放&amp;#39; }}&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;nextTrack&amp;#34;&amp;gt;下一首&amp;lt;/button&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;text&amp;gt;{{ currentTrack.name }}&amp;lt;/text&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { audioContext: null, isPlaying: false, currentTrackIndex: 0, tracks: [ { name: &amp;#39;歌曲 1&amp;#39;, url: &amp;#39;https://example.</description></item><item><title>Electron App</title><link>https://qfsyso.github.io/posts/electron-app/</link><pubDate>Sun, 04 Aug 2024 21:28:01 +0000</pubDate><guid>https://qfsyso.github.io/posts/electron-app/</guid><description>Electron fetch API发送HTTP请求 npm install electron --save-dev 创建： your-electron-app/ ├── main.js ├── renderer.js └── index.html
main.js - Electron
const { app, BrowserWindow } = require(&amp;#39;electron&amp;#39;); function createWindow () { // 创建浏览器窗口 let win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true } }); // 加载index.html文件 win.loadFile(&amp;#39;index.html&amp;#39;); } app.whenReady().then(createWindow); renderer.js - Electron的渲染器进程文件，使用fetch发送请求： document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, () =&amp;gt; { fetch(&amp;#39;https://jsonplaceholder.typicode.com/posts/1&amp;#39;) .then(response =&amp;gt; response.json()) .then(data =&amp;gt; { document.getElementById(&amp;#39;result&amp;#39;).textContent = JSON.stringify(data, null, 2); }) .</description></item></channel></rss>