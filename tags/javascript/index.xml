<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>JavaScript on MLOG</title><link>https://qfsyso.github.io/tags/javascript/</link><description>Recent content in JavaScript on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Fri, 19 Sep 2025 02:22:09 +0800</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>MP3</title><link>https://qfsyso.github.io/posts/mp3/</link><pubDate>Fri, 19 Sep 2025 02:22:09 +0800</pubDate><guid>https://qfsyso.github.io/posts/mp3/</guid><description>MP3 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;音乐播放器 (桌面/移动端优化)&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;preconnect&amp;#34; href=&amp;#34;https://fonts.googleapis.com&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;preconnect&amp;#34; href=&amp;#34;https://fonts.gstatic.com&amp;#34; crossorigin&amp;gt; &amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&amp;amp;display=swap&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css&amp;#34;&amp;gt; &amp;lt;style&amp;gt; :root { --font-main: &amp;#39;Noto Sans SC&amp;#39;, &amp;#39;Segoe UI&amp;#39;, Arial, sans-serif; --bg-gradient: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); --container-bg: rgba(255, 255, 255, 0.6); --container-shadow: rgba(0, 0, 0, 0.1); --backdrop-blur: 12px; --text-color: #2c3e50; --text-secondary-color: #7f8c8d; --primary-color: #3498db; --primary-color-dark: #2980b9; --warning-color: #e74c3c; --item-hover-bg: rgba(52, 152, 219, 0.</description></item><item><title>HarmonyOS TaskApp</title><link>https://qfsyso.github.io/posts/harmonyos-taskapp/</link><pubDate>Tue, 09 Sep 2025 01:18:48 +0800</pubDate><guid>https://qfsyso.github.io/posts/harmonyos-taskapp/</guid><description>目录结构 📁 项目结构
entry/src/main/ets/ ├── interface/ │ └── TaskDataInterface.ets # 类型接口定义 ├── model/ │ └── TaskModel.ets # 任务数据模型 ├── service/ │ ├── TaskService.ets # 任务业务逻辑 │ ├── StorageService.ets # 本地存储服务 │ └── DataManager.ets # 数据管理器 ├── utils/ │ └── StorageUtils.ets # 存储工具类 └── pages/ ├── Index.ets # 应用入口 ├── MainPage.ets # 主页面 ├── TaskListPage.ets # 任务列表 ├── AddTaskPage.ets # 添加任务 └── EditTaskPage.ets # 编辑任务 🔧 技术特性 开发平台: HarmonyOS 5.0.5 (API 17) 开发语言: ArkTS 架构模式: MVC + 服务层 类型安全: 完整的TypeScript类型定义 数据存储: HarmonyOS Preferences API UI框架: ArkUI 初始版本 ✅ 时间任务管理: 创建和管理基于时间的任务 ✅ 存钱任务管理: 创建和管理存钱目标任务 ✅ 进度跟踪: 实时计算和显示任务进度 ✅ 状态管理: 自动判断任务状态（进行中/已完成/已过期） ✅ 用户界面: 现代化的Material Design风格界面 ✅ 导航系统: 底部导航栏，分离列表和添加功能 ✅ 任务操作: 完整的增删改查功能 ✅ 响应式设计: 适配不同屏幕尺寸</description></item><item><title>HarmonyOS SDK17 Timer</title><link>https://qfsyso.github.io/posts/harmonyos-sdk17-timer/</link><pubDate>Sun, 07 Sep 2025 11:22:11 +0800</pubDate><guid>https://qfsyso.github.io/posts/harmonyos-sdk17-timer/</guid><description>targetSdkVersion HarmonyOS 5.0.5(API 17)
Timer @Entry @Component struct Index { @State currentTime: string = &amp;#39;&amp;#39;; @State minutes: number = 0; @State seconds: number = 0; @State totalSeconds: number = 0; @State remainingSeconds: number = 0; @State isRunning: boolean = false; @State isPaused: boolean = false; @State isFinished: boolean = false; private timer: number = -1; private clockTimer: number = -1; aboutToAppear() { this.updateCurrentTime(); this.clockTimer = setInterval(() =&amp;gt; { this.updateCurrentTime(); }, 1000); } aboutToDisappear() { if (this.</description></item><item><title>NodeRed Test YTB Change NetWrok</title><link>https://qfsyso.github.io/posts/nodered-test-ytb-change-netwrok/</link><pubDate>Sun, 25 May 2025 13:07:23 +0800</pubDate><guid>https://qfsyso.github.io/posts/nodered-test-ytb-change-netwrok/</guid><description>Setup Node-RED 一、前提条件：安装 Node.js Node-RED 需要 Node.js 环境，需先安装 Node.js。
打开 Node.js 官网：https://nodejs.org/ 下载并安装 LTS（长期支持）版本 安装完成后打开终端（Win + X → 终端），输入以下命令检查是否安装成功： node -v npm -v 二、全局安装 Node-RED 在命令行中执行以下命令安装 Node-RED：
npm install -g --unsafe-perm node-red 说明：
-g：表示全局安装 --unsafe-perm：解决某些系统中权限问题 三、启动 Node-RED 安装完成后，在终端中运行：
node-red 输出类似以下内容：
Server now running at http://127.0.0.1:1880/ 四、访问 Node-RED 编辑器 打开浏览器访问：
http://localhost:1880 即可进入图形化流程编辑界面。
🛠️ 五、可选：创建桌面快捷方式（.bat 启动脚本） 创建一个文本文件，内容如下：
@echo off title Node-RED node-red pause 保存为 node-red.bat
双击即可启动 Node-RED
六、（可选）将 Node-RED 作为后台服务运行 你可以使用如下工具实现后台服务：
pm2（推荐）：适用于 Node.</description></item><item><title>TypeScript Array Tuple</title><link>https://qfsyso.github.io/posts/typescript-array-tuple/</link><pubDate>Mon, 31 Mar 2025 02:11:38 +0800</pubDate><guid>https://qfsyso.github.io/posts/typescript-array-tuple/</guid><description>Array 1. 数组声明 指定类型的数组：
// 存储数字的数组 let numbers: number[] = [1, 2, 3, 4, 5]; // 存储字符串的数组 let strings: string[] = [&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;]; 使用泛型语法：
let numbers: Array&amp;lt;number&amp;gt; = [1, 2, 3]; 2. 访问数组元素 通过索引来访问数组元素，索引从 0 开始：
let numbers: number[] = [10, 20, 30]; console.log(numbers[0]); // 输出: 10 3. 修改数组元素 let numbers: number[] = [1, 2, 3]; numbers[1] = 20; console.log(numbers); // 输出: [1, 20, 3] 4. 数组长度 借助 length 属性可获取数组的长度：</description></item><item><title>Rspack Vue3</title><link>https://qfsyso.github.io/posts/rspack-vue3/</link><pubDate>Thu, 07 Nov 2024 00:31:15 +0000</pubDate><guid>https://qfsyso.github.io/posts/rspack-vue3/</guid><description>Rspack+Vue3+TS 项目环境构建到实战Rspack是什么? Rspack是一个基于 Rust 编写的高性能JavaScript 打包工具，它提供对 webpack 生态良好的兼容性能够无缝替换 webpack，并提供闪电般的构建速度。
为什么要做 Rspack 创建 Rspack 的原因，是为了解决在字节跳动维护构建工具时遇到的各种性能问题。在字节跳动内部存在许多巨石应用，它们都具有复杂的构建配置，生产环境的构建需要耗费十几分钟，甚至超过半小时;开发环境的耗时也超过十几分钟。 我们在 webpack 上尝试了多种方法来优化这些巨石应用，但是效果甚微。我们意识到在 webpack 上的优化已经难以为继，必须要从底层改造，才能适应我们的需求。 同时在聆听解决业务各种复杂的构建需求中，我们意识到开发人员对构建工具有以下要求: 快速的 Dev 启动性能 npm run dev 是开发者每天需要运行很多次的命令，但大型项目每次都需和要等待 10分钟，这对于工程师来说非常痛苦，因此优化开发模式下启动的时间至关重要 高效的 Build 性能 npm run bui1d 经常在 CI/CD 环境中运行，它决定了应用生产交付的效率,有些应用在生产环境中需要 20 到 30 分钟的构建时间，如果能缩短这段时间，对开发流程也将非 常有帮助。 灵活的配置 用户工程的配置非常灵活，不够统一。在之前的尝试中，将webpack配置迁移到其他构建工具时，我们遇到了许多问题，因为其他构建工具的配置不如 webpack 灵活。 生产环境的优化能力 在启用 Rspack之前，我们尝试了社区内的各种方案，但它们都面临着一定程度的生产环境负优化，例如拆分包不够精细等。因此，优化生产环境的产物是我们不可放弃的功能。 在确定了这四个需求后，我们调查了社区中的所有技术方案，它们通常都能很好的满足其中个别需求但没有一个方案能同时满足所有条件，因此，我们决定自研 Rspack。
和 webpack 的区别 webpack是目前最为成熟的构建工具，有着活跃的生态，灵活的配置和丰富的功能，但是其最为人诟病的是其性能问题，尤其在一些大型项目上，构建花费的时间可能会达到几分钟甚至几十分钟，&amp;laquo;&amp;lt;性能问题是目前 webpack 最大的短板。因此 Rspack 解决的问题核心就是webpack 的性能问题。 Rspack 比webpack 快得益于如下几方面: Rust 语言优势: Rspack 使用 Rust 语言编写，得益于 Rust的高性能编译器支持， Rust 编译生成的 Native Code 通常比JavaScript 性能更为高效。 高度并行的架构: webpack 受限于JavaScript 对多线程的赢弱支持，导致其很难进行高度的并行化计算，而得益于 Rust语言的并行化的良好支持，Rspack采用了高度并行化的架构，如模块图生成，代码生成等阶段，都是采用多线程并行执行，这使得其编译性能随着 CPU核心数的增长而增长，充分挖掘 CPU的多核优势。 内置大部分的功能: 事实上 webpack 本身的性能足够高效，但是因为 webpack 本身内置了较少的功能，这使得我们在使用 webpack 做现代 Web App 开发时，通常需要配合很多的 plugin 和loader 进行使用，而这些loader和 plugin 往往是性能的瓶颈，而 Rspack 虽然支持loader 和plugin，但是保证绝大部分常用功能都内置在Rspack内，从而减小Spluginlloader 导致的低性能和通信开销问题， 增量编译: 尽管 Rspack 的全量编译足够高效，但是当项目庞大时，全量的编译仍然难以满足 HMR的性能要求，因此在 HMR 阶段，我们采用的是更为高效的增量编译策略，从而保证，无论你的项目多大，其 HMR 的开销总是控制在合理范围内。</description></item><item><title>Axios Cors &amp;&amp; Timestamp</title><link>https://qfsyso.github.io/posts/axios-cors-timestamp/</link><pubDate>Sun, 04 Aug 2024 12:16:25 +0000</pubDate><guid>https://qfsyso.github.io/posts/axios-cors-timestamp/</guid><description>具体步骤 安装 Axios: 使用 Axios 进行 HTTP 请求。
封装 Axios: 将 Axios 封装成一个模块以便在项目中复用。
解决跨域问题: 在 vite.config.ts 文件中配置代理以解决跨域问题。
调用 API: 在 Vue 组件中使用封装的 Axios 进行数据请求和显示。
安装 Axios 首先，确保你已经安装了 Axios：
bash Copy Code npm install axios
封装 Axios 创建一个 http 文件夹并在其中创建一个 request.ts 文件：
src/http/request.ts:
import axios from &amp;#39;axios&amp;#39;; const service = axios.create({ baseURL: &amp;#39;http://localhost:16552/api/zblack&amp;#39;, // 根据你的后端API地址调整 timeout: 5000, // 请求超时时间 }); // 请求拦截器 service.interceptors.request.use( config =&amp;gt; { return config; }, error =&amp;gt; { console.</description></item><item><title>HarmonyOS Interface Router ArkTS ArkUI</title><link>https://qfsyso.github.io/posts/harmonyos-interface-router-arkts-arkui/</link><pubDate>Thu, 23 May 2024 21:49:44 +0000</pubDate><guid>https://qfsyso.github.io/posts/harmonyos-interface-router-arkts-arkui/</guid><description>🎬️create @Component export default struct TitleBar { build(){ Row(){ Text(&amp;#39;transition&amp;#39;) .fontSize(&amp;#39;30fp&amp;#39;) .fontColor(Color.White) } .width(&amp;#39;100%&amp;#39;) .height(&amp;#39;8%&amp;#39;) .backgroundColor(&amp;#39;#4169E1&amp;#39;) .padding({left:10}) } } 🎞️interface export interface IList{ title:string; url :string; } @State listData:IList[]=[ // @State listData:Array&amp;lt;IList&amp;gt;=[ { title:&amp;#39;in&amp;#39;, url:&amp;#39;pages/home1&amp;#39; }, { title:&amp;#39;scale&amp;#39;, url:&amp;#39;pages/home2&amp;#39; }, { title:&amp;#39;small&amp;#39;, url:&amp;#39;pages/home3&amp;#39; }, { title:&amp;#39;in&amp;#39;, url:&amp;#39;&amp;#39; } ] 💡foreach ForEach(this.listData,( item: IList,index?:number)=&amp;gt;{ //listitem Button({type:ButtonType.Capsule}){ Text(item.title) .fontSize(&amp;#39;35fp&amp;#39;) .fontColor(Color.White) } //... }) 🔦router import router from &amp;#39;@ohos.router&amp;#39; 📼mainpage &amp;#34;pages/home1&amp;#34; 📹️onclick .onClick(()=&amp;gt;{ //router router.</description></item><item><title>Typescript study</title><link>https://qfsyso.github.io/posts/typescript-study/</link><pubDate>Mon, 20 May 2024 00:07:45 +0000</pubDate><guid>https://qfsyso.github.io/posts/typescript-study/</guid><description>typescript ≈ javascript plus
🔗setup npm install typescript -g tsc -version npm install ts-node -g 🖌️hello world let str = &amp;#34;hi&amp;#34; console.log(str); ts-node t.ts 🖋️datatype let a1 :string =&amp;#39;abc&amp;#39; let a2:number = 2 let a3 :boolean =true let nu:null =null let un:undefined = undefined let a4:string|null = null let a5:1|2|3 = 2 any let a:any a= 1 a=&amp;#34;1&amp;#34; a=true strong type
let a:string = &amp;#34;123&amp;#34; a=1 Err
let a:unknown a= 1 a=&amp;#34;1&amp;#34; a=true let b :String if(typeof a ==&amp;#34;string&amp;#34;) { b=a } enum 枚举 enum Color { RED,BLUE,BLACK} let color = Color.</description></item><item><title>HarmonyOS Study ArkTS</title><link>https://qfsyso.github.io/posts/harmonyos-study-arkts/</link><pubDate>Sun, 21 Apr 2024 13:00:43 +0000</pubDate><guid>https://qfsyso.github.io/posts/harmonyos-study-arkts/</guid><description>💡 环境搭建 HarmonyOS开发环境搭建
DevEco Studio安装 https://developer.huawei.com/consumer/cn/deveco-studio/
​
🚀安装nodejs ​
🤵安装ohpm ​
🍔安装SDK ​
​
💥Emulator安装 ​
Q:The graphic card OpenGL version is too old for Previewer to work..
解决方法分两步：
1、下载enGL库：https://github.com/pal1000/mesa-dist-win/releases/download/23.1.1/mesa3d-23.1.1-release-msvc.7z
2、解压下载的zip文件,双击执行systemwidedeploy.cmd文件，然后按任意键，出现一个菜单，选择1，然后开始安装OpenGL驱动，出现complete 后关闭终端，重新运行程序即可生效。
🌶️新建ArkTs项目 ​
​
​
entry：HarmonyOS工程模块，编译构建生成一个HAP包。
src &amp;gt; main &amp;gt; ets：用于存放ets源码。 src &amp;gt; main &amp;gt; ets &amp;gt; MainAbility：应用/服务的入口。 src &amp;gt; main &amp;gt; ets &amp;gt; MainAbility &amp;gt; pages：MainAbility包含的页面。 src &amp;gt; main &amp;gt; ets &amp;gt; MainAbility &amp;gt; pages &amp;gt; index.ets：pages列表中的第一个页面，即应用的首页入口。 src &amp;gt; main &amp;gt; ets &amp;gt; MainAbility &amp;gt; app.</description></item></channel></rss>