<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Swagger on MLOG</title><link>https://qfsyso.github.io/tags/swagger/</link><description>Recent content in Swagger on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Thu, 07 Nov 2024 00:37:19 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/swagger/index.xml" rel="self" type="application/rss+xml"/><item><title> Node Swagger</title><link>https://qfsyso.github.io/posts/node-swagger/</link><pubDate>Thu, 07 Nov 2024 00:37:19 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-swagger/</guid><description>Node.js 和 Swagger 创建简单增删改查 (CRUD) API ， 使用 Express 作为 Web 框架，并集成 Swagger UI 来自动生成 API 文档。
mkdir node-swagger-crud cd node-swagger-crud npm init -y npm install express swagger-jsdoc swagger-ui-express 2: 设置 Express 应用 创建一个文件 app.js，用于定义 Express 应用及基本路由。
// app.js const express = require(&amp;#34;express&amp;#34;); const app = express(); app.use(express.json()); // 解析 JSON 请求 const swaggerJsDoc = require(&amp;#34;swagger-jsdoc&amp;#34;); const swaggerUi = require(&amp;#34;swagger-ui-express&amp;#34;); // Swagger 配置 const swaggerOptions = { swaggerDefinition: { openapi: &amp;#34;3.</description></item><item><title>.NET Swagger</title><link>https://qfsyso.github.io/posts/.net-swagger/</link><pubDate>Thu, 11 Apr 2024 23:27:19 +0000</pubDate><guid>https://qfsyso.github.io/posts/.net-swagger/</guid><description>开发环境 Win10 VS2022 .NET8.0
1.从NuGet添加Swagger ​
在解决方案资源管理器中右键单击项目&amp;gt;管理 NuGet 包 将包源设置为“nuget.org” 确保启用“包括预发行”选项 在搜索框中输入“Swashbuckle.AspNetCore” 从“浏览”选项卡中选择最新的“Swashbuckle.AspNetCore”包，然后单击“安装”
2.将 Swagger 生成器添加到以下位置的服务集合中Program.cs： builder.Services.AddControllers(); builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); ​
启用中间件 生成
app.UseSwagger(); app.UseSwaggerUI(); app.UseSwaggerUI(options =&amp;gt; { options.SwaggerEndpoint(&amp;#34;/swagger/v1/swagger.json&amp;#34;, &amp;#34;v1&amp;#34;); options.RoutePrefix = string.Empty; }); ​
3.添加API控制器 创建api
// GET api/&amp;lt;myapi&amp;gt;/5 /// &amp;lt;summary&amp;gt; /// getid /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;id&amp;#34;&amp;gt;id参数&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;valuestr&amp;lt;/returns&amp;gt; [HttpGet(&amp;#34;{id}&amp;#34;)] public string Get(int id) { return &amp;#34;value&amp;#34; + id; } // POST api/&amp;lt;myapi&amp;gt; [HttpPost] public string Post([FromBody] string value) { //post逻辑代码 return &amp;#34;myPost&amp;#34;; } // PUT api/&amp;lt;myapi&amp;gt;/5 [HttpPut(&amp;#34;{id}&amp;#34;)] public string Put(int id, [FromBody] string value) { //put逻辑代码 return &amp;#34;myPut&amp;#34;; } // DELETE api/&amp;lt;myapi&amp;gt;/5 [HttpDelete(&amp;#34;{id}&amp;#34;)] public string Delete(int id) { //delete逻辑代码 return &amp;#34;myDelete&amp;#34;; } ​</description></item></channel></rss>