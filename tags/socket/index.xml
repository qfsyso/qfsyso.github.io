<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Socket on MLOG</title><link>https://qfsyso.github.io/tags/socket/</link><description>Recent content in Socket on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Thu, 13 Feb 2025 01:12:50 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/socket/index.xml" rel="self" type="application/rss+xml"/><item><title> socket ssl tls</title><link>https://qfsyso.github.io/posts/socket-ssl-tls/</link><pubDate>Thu, 13 Feb 2025 01:12:50 +0000</pubDate><guid>https://qfsyso.github.io/posts/socket-ssl-tls/</guid><description>C#生成证书 在 C# 中生成 .pfx 证书文件，通常可以借助 System.Security.Cryptography 命名空间下的类来实现。以下为详细步骤和示例代码：
创建自签名证书 利用 RSA 算法生成密钥对，再使用 CertificateRequest 类创建自签名证书请求，最后生成自签名证书。 将证书保存为 .pfx 文件：使用 X509Certificate2 类把生成的证书和私钥保存为 .pfx 文件。
pusing System; using System.IO; using System.Security.Cryptography; using System.Security.Cryptography.X509Certificates; class Program { static void Main() { // 生成RSA密钥对 using (RSA rsa = RSA.Create(2048)) { // 创建证书请求 var certificateRequest = new CertificateRequest( &amp;#34;CN=MySelfSignedCertificate&amp;#34;, rsa, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1); // 设置证书扩展 certificateRequest.CertificateExtensions.Add( new X509BasicConstraintsExtension(true, false, 0, true)); certificateRequest.CertificateExtensions.Add( new X509KeyUsageExtension( X509KeyUsageFlags.DigitalSignature | X509KeyUsageFlags.KeyEncipherment, false)); // 生成自签名证书 var certificate = certificateRequest.</description></item><item><title>Electron App</title><link>https://qfsyso.github.io/posts/electron-app/</link><pubDate>Sun, 04 Aug 2024 21:28:01 +0000</pubDate><guid>https://qfsyso.github.io/posts/electron-app/</guid><description>Electron fetch API发送HTTP请求 npm install electron --save-dev 创建： your-electron-app/ ├── main.js ├── renderer.js └── index.html
main.js - Electron
const { app, BrowserWindow } = require(&amp;#39;electron&amp;#39;); function createWindow () { // 创建浏览器窗口 let win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true } }); // 加载index.html文件 win.loadFile(&amp;#39;index.html&amp;#39;); } app.whenReady().then(createWindow); renderer.js - Electron的渲染器进程文件，使用fetch发送请求： document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, () =&amp;gt; { fetch(&amp;#39;https://jsonplaceholder.typicode.com/posts/1&amp;#39;) .then(response =&amp;gt; response.json()) .then(data =&amp;gt; { document.getElementById(&amp;#39;result&amp;#39;).textContent = JSON.stringify(data, null, 2); }) .</description></item><item><title>Node socket.io</title><link>https://qfsyso.github.io/posts/node-socket.io/</link><pubDate>Sun, 26 May 2024 23:01:07 +0000</pubDate><guid>https://qfsyso.github.io/posts/node-socket.io/</guid><description>server
npm install express npm install socket.io const express = require(&amp;#39;express&amp;#39;); const http = require(&amp;#39;http&amp;#39;); const socketIO = require(&amp;#39;socket.io&amp;#39;); const app = express(); const server = http.createServer(app); const io = socketIO(server); io.on(&amp;#39;connection&amp;#39;, (socket) =&amp;gt; { console.log(&amp;#39;User connected&amp;#39;); socket.on(&amp;#39;chat message&amp;#39;, (msg) =&amp;gt; { console.log(&amp;#39;message: &amp;#39; + msg); io.emit(&amp;#39;chat message&amp;#39;, msg); // to all }); socket.on(&amp;#39;disconnect&amp;#39;, () =&amp;gt; { console.log(&amp;#39;User disconnected&amp;#39;); }); }); server.listen(24525, () =&amp;gt; { console.log(&amp;#39;Node Server is running on port 24525&amp;#39;); }); docker dockerfile</description></item><item><title>Nodejs base</title><link>https://qfsyso.github.io/posts/nodejs-base/</link><pubDate>Fri, 17 May 2024 19:00:03 +0000</pubDate><guid>https://qfsyso.github.io/posts/nodejs-base/</guid><description>简单的说 Node.js 就是运行在服务端的 JavaScript。
Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。
Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。
🛠Node.js安装 Node.js安装在上一篇文章Debian Node.js HEXO 有讲到
截至目前最新的版本是20.12.2
#查看版本 node -v v20.12.2
win下可以在官网下载安装 https://nodejs.org/en/download
debian nodejs node 14版本
$ apt-get update $ curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash - #如果提示sudo 命令没有找到，一定要下载，执行apt-get install sudo -y 即可，然后再执行上述命令
$ apt-get install nodejs -y $ node --version //验证 当然如果需要安装node20版本，只需将上述命令替换为：
$ curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - 💬helloworld hi.</description></item></channel></rss>