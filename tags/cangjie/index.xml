<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cangjie on MLOG</title><link>https://qfsyso.github.io/tags/cangjie/</link><description>Recent content in Cangjie on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Mon, 04 Aug 2025 21:50:37 +0800</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/cangjie/index.xml" rel="self" type="application/rss+xml"/><item><title>Cangjie01</title><link>https://qfsyso.github.io/posts/cangjie01/</link><pubDate>Mon, 04 Aug 2025 21:50:37 +0800</pubDate><guid>https://qfsyso.github.io/posts/cangjie01/</guid><description>仓颉-C跨语言编程 仓颉编程语言作为一款面向全场景应用开发的现代编程语言，通过现代语言特性的集成、全方位的编译优化和运行时实现、以及开箱即用的 IDE 工具链支持，为开发者打造友好开发体验和卓越程序性能。C语言是一种较早的程序设计语言，广泛应用于底层开发。C语言能以简易的方式编译、处理低级存储器。
仓颉-C跨语言互操作介绍 仓颉为了兼容已有的生态，支持调用 C 语言的函数，也支持 C 语言调用仓颉的函数。
仓颉支持通过FFI（Foreign Function Interface）直接调用C语言函数。其核心机制包括：
类型兼容性：仓颉的Int32、Float64等基础类型与C语言的int、double等一一对应； 动态库绑定：将C代码编译为共享库（如.so或.dll），并通过@C和foreign声明函数； 安全性：仓颉通过类型检查确保调用参数与返回值的正确性，避免内存错误。 举个例子，假设要调用 C 的 rand 和 printf 函数，它的函数签名如下：
// stdlib.h int rand(); // stdio.h int printf (const char *fmt, ...); 那么在仓颉中调用这两个函数的方式如下： // 通过`foreign`关键字声明函数，省略`@C` foreign func rand(): Int32 foreign func printf(fmt: CString, ...): Int32 main() { // 通过`unsafe`块调用C函数 let r = unsafe { rand() } println(&amp;#34;random number ${r}&amp;#34;) unsafe { var fmt = LibC.mallocCString(&amp;#34;Hello, No.%d\n&amp;#34;) printf(fmt, 1) LibC.</description></item></channel></rss>