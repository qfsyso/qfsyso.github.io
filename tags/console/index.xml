<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Console on MLOG</title><link>https://qfsyso.github.io/tags/console/</link><description>Recent content in Console on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Mon, 05 Aug 2024 00:38:00 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/console/index.xml" rel="self" type="application/rss+xml"/><item><title>C# keep alive</title><link>https://qfsyso.github.io/posts/c%23-keep-alive/</link><pubDate>Mon, 05 Aug 2024 00:38:00 +0000</pubDate><guid>https://qfsyso.github.io/posts/c%23-keep-alive/</guid><description>在C#中，想让一个控制台应用程序保持运行而不依赖 Cnsole.ReadKey()，可以通过多种方式实现。
1. 使用事件循环 可以使用 EventWaitHandle 或者其他类似的同步原语来创建一个事件循环，让程序保持在等待状态。
using System; using System.Threading; class Program { static void Main() { // 创建一个自动重置的事件对象 EventWaitHandle waitHandle = new EventWaitHandle(false, EventResetMode.AutoReset); Console.WriteLine(&amp;#34;Press any key to exit...&amp;#34;); // 等待事件被设置，如果没有接收到信号，则保持等待状态 waitHandle.WaitOne(); Console.Clear(); } } 使用无限循环 你可以创建一个无限循环，直到你手动终止程序。
//cpu占用高~ using System; class Program { static void Main() { while (true) { // 程序在这里保持运行状态，等待事件或其他中断。 Console.WriteLine(&amp;#34;The program is running. Press CTRL+C to exit.&amp;#34;); } } } 3. 使用定时器 创建一个定时器，定期执行某些任务，或者用于控制程序行为。
using System; using System.</description></item></channel></rss>