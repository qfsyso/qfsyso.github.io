<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Vue on MLOG</title><link>https://qfsyso.github.io/tags/vue/</link><description>Recent content in Vue on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Thu, 07 Nov 2024 00:31:15 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>Rspack Vue3</title><link>https://qfsyso.github.io/posts/rspack-vue3/</link><pubDate>Thu, 07 Nov 2024 00:31:15 +0000</pubDate><guid>https://qfsyso.github.io/posts/rspack-vue3/</guid><description>Rspack+Vue3+TS 项目环境构建到实战Rspack是什么? Rspack是一个基于 Rust 编写的高性能JavaScript 打包工具，它提供对 webpack 生态良好的兼容性能够无缝替换 webpack，并提供闪电般的构建速度。
为什么要做 Rspack 创建 Rspack 的原因，是为了解决在字节跳动维护构建工具时遇到的各种性能问题。在字节跳动内部存在许多巨石应用，它们都具有复杂的构建配置，生产环境的构建需要耗费十几分钟，甚至超过半小时;开发环境的耗时也超过十几分钟。 我们在 webpack 上尝试了多种方法来优化这些巨石应用，但是效果甚微。我们意识到在 webpack 上的优化已经难以为继，必须要从底层改造，才能适应我们的需求。 同时在聆听解决业务各种复杂的构建需求中，我们意识到开发人员对构建工具有以下要求: 快速的 Dev 启动性能 npm run dev 是开发者每天需要运行很多次的命令，但大型项目每次都需和要等待 10分钟，这对于工程师来说非常痛苦，因此优化开发模式下启动的时间至关重要 高效的 Build 性能 npm run bui1d 经常在 CI/CD 环境中运行，它决定了应用生产交付的效率,有些应用在生产环境中需要 20 到 30 分钟的构建时间，如果能缩短这段时间，对开发流程也将非 常有帮助。 灵活的配置 用户工程的配置非常灵活，不够统一。在之前的尝试中，将webpack配置迁移到其他构建工具时，我们遇到了许多问题，因为其他构建工具的配置不如 webpack 灵活。 生产环境的优化能力 在启用 Rspack之前，我们尝试了社区内的各种方案，但它们都面临着一定程度的生产环境负优化，例如拆分包不够精细等。因此，优化生产环境的产物是我们不可放弃的功能。 在确定了这四个需求后，我们调查了社区中的所有技术方案，它们通常都能很好的满足其中个别需求但没有一个方案能同时满足所有条件，因此，我们决定自研 Rspack。
和 webpack 的区别 webpack是目前最为成熟的构建工具，有着活跃的生态，灵活的配置和丰富的功能，但是其最为人诟病的是其性能问题，尤其在一些大型项目上，构建花费的时间可能会达到几分钟甚至几十分钟，&amp;laquo;&amp;lt;性能问题是目前 webpack 最大的短板。因此 Rspack 解决的问题核心就是webpack 的性能问题。 Rspack 比webpack 快得益于如下几方面: Rust 语言优势: Rspack 使用 Rust 语言编写，得益于 Rust的高性能编译器支持， Rust 编译生成的 Native Code 通常比JavaScript 性能更为高效。 高度并行的架构: webpack 受限于JavaScript 对多线程的赢弱支持，导致其很难进行高度的并行化计算，而得益于 Rust语言的并行化的良好支持，Rspack采用了高度并行化的架构，如模块图生成，代码生成等阶段，都是采用多线程并行执行，这使得其编译性能随着 CPU核心数的增长而增长，充分挖掘 CPU的多核优势。 内置大部分的功能: 事实上 webpack 本身的性能足够高效，但是因为 webpack 本身内置了较少的功能，这使得我们在使用 webpack 做现代 Web App 开发时，通常需要配合很多的 plugin 和loader 进行使用，而这些loader和 plugin 往往是性能的瓶颈，而 Rspack 虽然支持loader 和plugin，但是保证绝大部分常用功能都内置在Rspack内，从而减小Spluginlloader 导致的低性能和通信开销问题， 增量编译: 尽管 Rspack 的全量编译足够高效，但是当项目庞大时，全量的编译仍然难以满足 HMR的性能要求，因此在 HMR 阶段，我们采用的是更为高效的增量编译策略，从而保证，无论你的项目多大，其 HMR 的开销总是控制在合理范围内。</description></item><item><title>vue3 dialog play aac mp4</title><link>https://qfsyso.github.io/posts/vue3-dialog-play-aac-mp4/</link><pubDate>Wed, 16 Oct 2024 01:29:29 +0000</pubDate><guid>https://qfsyso.github.io/posts/vue3-dialog-play-aac-mp4/</guid><description>vue3 play acc mp4 show png
&amp;lt;template&amp;gt; &amp;lt;div v-if=&amp;#34;scope.row.MsgType == 7 || scope.row.MsgType == 19&amp;#34;&amp;gt; &amp;lt;el-button :type=&amp;#34;playingRowId === scope.row.AutoID ? &amp;#39;warning&amp;#39; : &amp;#39;info&amp;#39;&amp;#34; :disabled=&amp;#34;playingRowId === scope.row.AutoID&amp;#34; @click=&amp;#34;handleD(scope.row.Content, scope.row.MsgType, scope.row.UserID, scope.row.AutoID)&amp;#34; &amp;gt; {{ playingRowId === scope.row.AutoID ? &amp;#39;播放中&amp;#39; : &amp;#39;播放&amp;#39; }} &amp;lt;/el-button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- MP4 Dialog --&amp;gt; &amp;lt;el-dialog :visible.sync=&amp;#34;dialogVisible&amp;#34; width=&amp;#34;80%&amp;#34; center @close=&amp;#34;handleDialogClose&amp;#34;&amp;gt; &amp;lt;video ref=&amp;#34;videoPlayer&amp;#34; controls autoplay @ended=&amp;#34;handleDialogClose&amp;#34; :src=&amp;#34;mediaSource&amp;#34; style=&amp;#34;width: 100%;&amp;#34; &amp;gt;&amp;lt;/video&amp;gt; &amp;lt;/el-dialog&amp;gt; &amp;lt;/template&amp;gt; JS代码
&amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39;; import { ElMessage } from &amp;#39;element-plus&amp;#39;; import request from &amp;#39;@/api/request&amp;#39;; // Assuming you use Axios or similar const playingRowId = ref(null); // Tracks the AutoID of the row currently being played const dialogVisible = ref(false); const mediaSource = ref(&amp;#39;&amp;#39;); async function handleD(com, msgt, userid, autoid) { try { // Set the current row&amp;#39;s AutoID as the playing row playingRowId.</description></item><item><title>electron uniapp mp3</title><link>https://qfsyso.github.io/posts/electron-uniapp-mp3/</link><pubDate>Thu, 19 Sep 2024 23:29:51 +0000</pubDate><guid>https://qfsyso.github.io/posts/electron-uniapp-mp3/</guid><description>前言 音乐APP版权/广告问题，让听歌体验很差，所以自己整个简单的播放器~
Uniapp MP3 1. 创建项目 在 HBuilderX 中，新建一个 UniApp 项目，项目结构如下：
- pages/ - index/ - index.vue - static/ - manifest.json - pages.json 2. 页面设计和逻辑 index.vue 文件 在 pages/index/index.vue 文件中实现播放器的界面和逻辑：
&amp;lt;template&amp;gt; &amp;lt;view class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;text class=&amp;#34;title&amp;#34;&amp;gt;UniApp 音乐播放器&amp;lt;/text&amp;gt; &amp;lt;view class=&amp;#34;controls&amp;#34;&amp;gt; &amp;lt;button @click=&amp;#34;prevTrack&amp;#34;&amp;gt;上一首&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;playPause&amp;#34;&amp;gt;{{ isPlaying ? &amp;#39;暂停&amp;#39; : &amp;#39;播放&amp;#39; }}&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;nextTrack&amp;#34;&amp;gt;下一首&amp;lt;/button&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;text&amp;gt;{{ currentTrack.name }}&amp;lt;/text&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { audioContext: null, isPlaying: false, currentTrackIndex: 0, tracks: [ { name: &amp;#39;歌曲 1&amp;#39;, url: &amp;#39;https://example.</description></item><item><title> VUE npm yarn</title><link>https://qfsyso.github.io/posts/vue-npm-yarn/</link><pubDate>Sat, 27 Jul 2024 23:53:03 +0000</pubDate><guid>https://qfsyso.github.io/posts/vue-npm-yarn/</guid><description>vite cretae vue npm yarn npm init vite PN vue3 ts
cd PN npm install npm run dev or
npm install -g yarn yarn yarn dev NPM npm init 初始化某个项目 npm install/link 默认的安装依赖操作 npm install taco --save 安装某个依赖，并且默认保存到package. npm uninstall taco --save 安装某个开发时依赖项目 npm install taco --save-dev 更新某个依赖项目 npm update taco --save安装某个全局依赖项目 npm install taco --global 安装某个全局依赖项目 npm publish/login/1ogout 发布/登录/登出，一系列NPM Registry操作 npm rutest 运行某个命令 YARN yarn init 初始化某个项目 yarn install/link 默认的安装依赖操作 yarn add taco 安装某个依赖，并且默认保存到package.</description></item><item><title>Vue study</title><link>https://qfsyso.github.io/posts/vue-study/</link><pubDate>Wed, 17 Apr 2024 08:59:30 +0000</pubDate><guid>https://qfsyso.github.io/posts/vue-study/</guid><description>前言 Vue.js，这个轻量级且灵活的JavaScript框架，就像一位魔术师，用它的魔法棒将数据和视图巧妙地连接在一起。当数据发生变化时，Vue.js就像变魔术一样，让视图自动更新，为开发者带来了极大的便利。
Vue.js的诞生，源于一位名叫尤雨溪的开发者对前端开发的热爱与追求。在Google工作期间，他受到了Angular的启发，决定开发一款更加轻量、灵活的框架。于是，Vue.js应运而生，它的名字来源于“View”的缩写，寓意着它专注于视图层的开发。Vue.js不断地完善和发展。它引入了响应式数据绑定、组件化开发等核心概念，让前端开发变得更加高效和可维护。
👋 Vue环境搭建 首先，搭一个打代码的环境
1.安装node.js 在使用VS Code之前，需要安装Vue的开发环境。
安装Vue的最简单方法是使用npm包管理器，先安装Node.js和npm。
node官网 =&amp;gt; https://nodejs.org/en/download
2.配置环境变量 在nodejs安装目录下新建node_cache（nodejs缓存）、node_global（全局包存放）两个文件夹，如下图所示。
​​
打开cmd命令提示符，配置文件路径如下：
​​
配置环境变量
​​
系统属性-&amp;gt;高级-&amp;gt;环境变量-&amp;gt;新增环境变量： ​​
系统变量 ​​
​​
3.VSCode配置 Visual Studio Code
以管理员身份运行VSCode
VSCode安装插件ESLint
安装js打包工具
npm install -g webpack ​​
​​
4.安装Vue CLI npm install -g vue-cli (vue-cli npm install @vue/cli -g --unsafe-perm) 5.在VS Code中打开Vue项目 5.1. 在VS Code中，File &amp;gt; Open Folder&amp;hellip; 选择“文件”&amp;gt; “打开文件夹”。 ​​
5.2. 找到Vue项目文件夹，选择“文件夹”并打开。 ​​
可以根据需要，在Extensions安装VSCode的中文扩展。
5.3也可以通过Vue UI 创建一个新的Vue项目然后打开 vue ui ​​</description></item></channel></rss>