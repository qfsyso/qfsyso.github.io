<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Redis on MLOG</title><link>https://qfsyso.github.io/tags/redis/</link><description>Recent content in Redis on MLOG</description><generator>Hugo -- 0.126.3</generator><language>zh-CN</language><lastBuildDate>Tue, 03 Dec 2024 01:20:03 +0000</lastBuildDate><atom:link href="https://qfsyso.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>jwt redis</title><link>https://qfsyso.github.io/posts/jwt-redis/</link><pubDate>Tue, 03 Dec 2024 01:20:03 +0000</pubDate><guid>https://qfsyso.github.io/posts/jwt-redis/</guid><description>Redis JWT 在 .NET 中使用 Redis 来存储 JWT（JSON Web Token）可以通过多种方式实现， 例如在用户登录时将生成的 JWT 存储在 Redis 中以便于后续验证和管理。
实现步骤
引入依赖 确保你的项目引入了以下必要的 NuGet 包：
Microsoft.AspNetCore.Authentication.JwtBearer：用于 JWT 身份验证。 StackExchange.Redis：用于与 Redis 通信。
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer dotnet add package StackExchange.Redis 配置 Redis 客户端 设置 Redis 的连接和操作。
生成 JWT 根据用户信息生成 JWT 并将其存储到 Redis。
验证 JWT 在验证阶段从 Redis 检查 token 是否有效。
实现 Token 的失效机制 利用 Redis 的 TTL（过期时间）特性来管理 token 的生命周期。
代码实现 1. 配置 Redis 客户端 在 Program.cs 或 Startup.</description></item><item><title>redis sentinel cluster</title><link>https://qfsyso.github.io/posts/redis-sentinel-cluster/</link><pubDate>Fri, 22 Nov 2024 22:18:29 +0000</pubDate><guid>https://qfsyso.github.io/posts/redis-sentinel-cluster/</guid><description>Debian 服务器上部署分布式 Redis 可以实现高可用性或负载均衡，具体可以选择以下两种方案之一：
主从复制 (Master-Slave Replication) 主从复制用于数据冗余备份和读写分离，但并不提供自动故障切换功能。
Redis Sentinel (哨兵模式) Redis Sentinel 在主从复制的基础上增加了自动故障切换功能，用于实现高可用性。
Redis Cluster (集群模式) Redis Cluster 是一种分布式部署方式，支持数据分片和高可用性，适用于需要扩展性的场景。
Redis Sentinel 部署架构 两台服务器： 主 Redis 服务器（假设 IP：192.168.1.101） 从 Redis 服务器（假设 IP：192.168.1.102） Sentinel 哨兵进程： 每台服务器运行一个 Sentinel 进程，用于监控和故障切换。
步骤 1：安装 Redis 在两台服务器上分别安装 Redis：
sudo apt update sudo apt install redis-server 验证 Redis 版本：
redis-server --version 步骤 2：配置 Redis 主从复制 在主服务器 (192.168.1.101) 上 编辑 Redis 配置文件 /etc/redis/redis.conf：
bind 0.0.0.0 # 允许外部访问 protected-mode no # 关闭保护模式（测试环境使用） appendonly yes # 开启持久化 启动 Redis 服务：</description></item><item><title>.NET Redis 10s Rate Limiter Sliding Window Algorithm</title><link>https://qfsyso.github.io/posts/.net-redis-10s-rate-limiter-sliding-window-algorithm/</link><pubDate>Fri, 31 May 2024 06:24:16 +0000</pubDate><guid>https://qfsyso.github.io/posts/.net-redis-10s-rate-limiter-sliding-window-algorithm/</guid><description>在.NET中使用Redis来限制接口请求频率（每10秒只允许请求一次）
NuGet setup StackExchange.Redis
实现速率限制逻辑： 在你的控制器或服务层中，你需要编写一个方法来检查并更新Redis中的速率限制计数器。 设置Redis键： 为每个用户或每个IP地址（取决于你的需求）设置一个唯一的键。这个键将用于存储最后一次请求的时间戳和/或请求计数。 检查时间戳： 当请求到达时，从Redis中获取该键的值（时间戳）。如果键不存在或时间戳超过10秒，则允许请求并更新键的值（设置为当前时间戳）。 处理超过速率的请求： 如果时间戳在10秒内，则拒绝或限制该请求（返回限制状态码）。
private static readonly Lazy&amp;lt;ConnectionMultiplexer&amp;gt; LazyConnection = new Lazy&amp;lt;ConnectionMultiplexer&amp;gt;(() =&amp;gt; { // 配置Redis连接字符串 &amp;#34;localhost,abortConnect=false&amp;#34; return ConnectionMultiplexer.Connect(&amp;#34;localhost:6379&amp;#34;); }); private static ConnectionMultiplexer Connection =&amp;gt; LazyConnection.Value; private static IDatabase Db =&amp;gt; Connection.GetDatabase(); public async Task&amp;lt;ActionResult&amp;gt; MyAction() { IPAddress clientIpAddress = HttpContext.Connection.RemoteIpAddress; string ipAddress = clientIpAddress.ToString(); string redisKey = $&amp;#34;rate-limit:{ipAddress}&amp;#34;; // 构建Redis键名 // 获取当前时间戳（可以是Unix时间戳或任何你选择的格式） long currentTimestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds(); // 尝试从Redis获取时间戳 var redisValue = await Db.</description></item><item><title>.NET SignalR Redis</title><link>https://qfsyso.github.io/posts/.net-signalr-redis/</link><pubDate>Fri, 12 Apr 2024 07:44:04 +0000</pubDate><guid>https://qfsyso.github.io/posts/.net-signalr-redis/</guid><description>环境 Win10 VS2022 .NET8 Docker Redis
前言
什么是 SignalR？ ASP.NET Core SignalR 是一个开放源代码库，可用于简化向应用添加实时 Web 功能。 实时 Web 功能使服务器端代码能够将内容推送到客户端。
适合 SignalR 的候选项：
需要从服务器进行高频率更新的应用。 （游戏、社交网络、投票、拍卖、地图和 GPS 应用） 仪表板和监视应用。 （公司仪表板、即时销售更新或出行警报） 协作应用。 （包括白板应用和团队会议软件） 需要通知的应用。（ 社交网络、电子邮件、聊天、游戏等） SignalR 提供用于创建服务器到客户端的远程过程调用 (RPC) API。 RPC 从服务器端 .NET Core 代码调用客户端上的函数。支持JavaScript ，.NET ，JAVA，Swift （官方没有明确支持，这是第三方库）其中每个平台都有各自的客户端 SDK。 因此，RPC 调用所调用的编程语言有所不同。
ASP.NET Core SignalR 的一些功能：
自动处理连接管理。 同时向所有连接的客户端发送消息。 例如聊天室。 向特定客户端或客户端组发送消息。 对其进行缩放，以处理不断增加的流量。 SignalR 中心协议 1.👋nuget引入SignalR ​​ ​
2.👀创建SignalR Hub
using Microsoft.AspNetCore.SignalR; using System.Threading.Tasks; namespace WebSignalR { public class ChatHub : Hub { public async Task SendMessage(string user, string message) { await Clients.</description></item></channel></rss>